using DotNetGraph.Core;
using System.Text;
using System.Text.RegularExpressions;

namespace DotnetVisualizer.Core;

/// <summary>
/// Converts a <see cref="DotGraph"/> to Mermaid flow‑chart format.
/// </summary>
public static class MermaidExporter
{
    private static readonly Regex _invalid = new(@"[^0-9A-Za-z_]", RegexOptions.Compiled);
    private static readonly Regex _startsNum = new(@"^[0-9]", RegexOptions.Compiled);

    /// <summary>
    /// Convert <paramref name="graph"/> to Mermaid flowchart and save to <paramref name="path"/>.
    /// </summary>
    public static async Task WriteMermaidAsync(
        DotGraph graph,
        string path,
        CancellationToken ct = default)
    {
        var sb = new StringBuilder(16_384)
            .AppendLine("flowchart LR")
            .AppendLine("%% autogenerated by DotnetVisualizer");

        var idMap = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

        static string ToMermaidId(string raw)
        {
            var id = _invalid.Replace(raw, "_");
            if (_startsNum.IsMatch(id)) id = $"_{id}";
            return id;
        }

        foreach (var n in graph.Elements.OfType<DotNode>())
        {
            var rawId = n.Identifier.Value;
            var mmId = ToMermaidId(rawId);
            idMap[rawId] = mmId;

            var label = n.Label?.Value ?? rawId;

            var shapeVal = n.Shape?.Value?.ToLowerInvariant();
            var rendered = shapeVal switch
            {
                "ellipse" => $"{mmId}((\"{label}\"))",
                "box" => $"{mmId}[\"{label}\"]",
                _ => $"{mmId}[/{label}/]"
            };
            sb.AppendLine(rendered);
        }

        foreach (var e in graph.Elements.OfType<DotEdge>())
        {
            var from = idMap[e.From.Value];
            var to = idMap[e.To.Value];

            var isDotted = e.Style?.Value?
                .Contains("dotted", StringComparison.OrdinalIgnoreCase) == true;

            var arrow = isDotted ? "-.->" : "-->";

            sb.Append(from).Append(arrow);

            if (!string.IsNullOrWhiteSpace(e.Label?.Value))
                sb.Append('|').Append(e.Label!.Value.Replace("\"", "\\\"")).Append('|');

            sb.AppendLine(to);
        }

        Directory.CreateDirectory(Path.GetDirectoryName(Path.GetFullPath(path))!);
        await File.WriteAllTextAsync(path, sb.ToString(), ct);
    }
}